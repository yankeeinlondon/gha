# Setup Node.js and Run Tests
# A composite action that demonstrates how to use the modular workflow system
# This action can be used by other repositories

name: 'Setup Node and Test'
description: 'Setup Node.js environment and run tests with coverage'
author: 'Your Organization'

inputs:
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '20.x'
  
  package-manager:
    description: 'Package manager to use (npm, yarn, pnpm)'
    required: false
    default: 'npm'
  
  install-command:
    description: 'Custom install command'
    required: false
    default: ''
  
  test-command:
    description: 'Test command to run'
    required: false
    default: 'test'
  
  coverage:
    description: 'Enable coverage reporting'
    required: false
    default: 'true'
  
  coverage-reporter:
    description: 'Coverage reporter type'
    required: false
    default: 'lcov'
  
  upload-coverage:
    description: 'Upload coverage to Codecov'
    required: false
    default: 'false'
  
  codecov-token:
    description: 'Codecov token (required if upload-coverage is true)'
    required: false
  
  working-directory:
    description: 'Working directory'
    required: false
    default: '.'
  
  cache-key:
    description: 'Additional cache key for dependencies'
    required: false
    default: ''

outputs:
  coverage-percentage:
    description: 'Test coverage percentage'
    value: ${{ steps.coverage.outputs.percentage }}
  
  test-results:
    description: 'Path to test results'
    value: ${{ steps.test.outputs.results }}
  
  cache-hit:
    description: 'Whether cache was hit'
    value: ${{ steps.cache.outputs.cache-hit }}

runs:
  using: 'composite'
  steps:
    # Setup Node.js with caching
    # In the modular system, this would use: @extends: steps/setup-node.yml
    - name: Setup Node.js ${{ inputs.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        cache: ${{ inputs.package-manager }}
        cache-dependency-path: |
          ${{ inputs.working-directory }}/package-lock.json
          ${{ inputs.working-directory }}/yarn.lock
          ${{ inputs.working-directory }}/pnpm-lock.yaml
    
    # Cache dependencies with custom key
    - name: Cache dependencies
      id: cache
      uses: actions/cache@v4
      with:
        path: |
          ${{ inputs.working-directory }}/node_modules
          ~/.cache/Cypress
          ~/.cache/ms-playwright
        key: ${{ runner.os }}-${{ inputs.package-manager }}-${{ hashFiles(format('{0}/**/package-lock.json', inputs.working-directory), format('{0}/**/yarn.lock', inputs.working-directory), format('{0}/**/pnpm-lock.yaml', inputs.working-directory)) }}-${{ inputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-${{ inputs.package-manager }}-
    
    # Install dependencies
    - name: Install dependencies
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        if [ -n "${{ inputs.install-command }}" ]; then
          ${{ inputs.install-command }}
        else
          case "${{ inputs.package-manager }}" in
            npm)
              npm ci --no-audit --prefer-offline
              ;;
            yarn)
              yarn install --frozen-lockfile --prefer-offline
              ;;
            pnpm)
              pnpm install --frozen-lockfile --prefer-offline
              ;;
            *)
              echo "Unknown package manager: ${{ inputs.package-manager }}"
              exit 1
              ;;
          esac
        fi
    
    # Run tests
    - name: Run tests
      id: test
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        # Setup test command
        if [ "${{ inputs.coverage }}" == "true" ]; then
          TEST_CMD="${{ inputs.package-manager }} run ${{ inputs.test-command }} -- --coverage --coverageReporter=${{ inputs.coverage-reporter }}"
        else
          TEST_CMD="${{ inputs.package-manager }} run ${{ inputs.test-command }}"
        fi
        
        # Run tests and capture output
        echo "Running: $TEST_CMD"
        $TEST_CMD | tee test-output.log
        
        # Save results path
        echo "results=${{ inputs.working-directory }}/test-output.log" >> $GITHUB_OUTPUT
    
    # Extract coverage percentage
    - name: Extract coverage
      id: coverage
      if: inputs.coverage == 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        # Try to extract coverage from common locations
        if [ -f "coverage/coverage-summary.json" ]; then
          COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct // 0')
          echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "📊 Coverage: $COVERAGE%"
        elif [ -f "coverage/lcov-report/index.html" ]; then
          # Extract from HTML report
          COVERAGE=$(grep -oP 'Total.*?(\d+\.?\d*)%' coverage/lcov-report/index.html | grep -oP '\d+\.?\d*' | head -1)
          echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "📊 Coverage: $COVERAGE%"
        else
          echo "percentage=0" >> $GITHUB_OUTPUT
          echo "⚠️ Coverage report not found"
        fi
    
    # Upload coverage to Codecov
    - name: Upload coverage to Codecov
      if: inputs.upload-coverage == 'true' && inputs.coverage == 'true'
      uses: codecov/codecov-action@v4
      with:
        token: ${{ inputs.codecov-token }}
        directory: ${{ inputs.working-directory }}/coverage
        fail_ci_if_error: false
        verbose: true
    
    # Upload test results as artifact
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ inputs.node-version }}
        path: |
          ${{ inputs.working-directory }}/test-output.log
          ${{ inputs.working-directory }}/coverage/
        retention-days: 7
    
    # Create summary
    - name: Create test summary
      if: always()
      shell: bash
      run: |
        echo "## Test Results Summary 📋" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Node Version**: ${{ inputs.node-version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Package Manager**: ${{ inputs.package-manager }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Working Directory**: ${{ inputs.working-directory }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Cache Hit**: ${{ steps.cache.outputs.cache-hit == 'true' && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ inputs.coverage }}" == "true" ] && [ -n "${{ steps.coverage.outputs.percentage }}" ]; then
          echo "- **Coverage**: ${{ steps.coverage.outputs.percentage }}%" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add test output preview
        if [ -f "${{ inputs.working-directory }}/test-output.log" ]; then
          echo "<details>" >> $GITHUB_STEP_SUMMARY
          echo "<summary>Test Output</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          tail -n 50 "${{ inputs.working-directory }}/test-output.log" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY
        fi

branding:
  icon: 'check-circle'
  color: 'green'
