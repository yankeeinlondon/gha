name: publish
on:
  workflow_call:
    inputs:
      os:
        type: string
        default: '["ubuntu-latest", "windows-latest", "macos-latest"]'
        required: false
      nodeVersions:
        type: string
        default: '["20.x", "22.x"]'
        required: false
      failFast:
        type: boolean
        default: false
        required: false
      metrics:
        type: boolean
        default: false
        required: false
      metricsCommand:
        type: string
        default: "pnpm test:metrics"
        required: false
      api_token:
        type: string
        description: "allows an API token to be passed to testing as API_TOKEN and VITE_API_TOKEN"
        default: ""
        required: false
      gh_token:
        description: "allows a Github personal access token to be passed to testing as GH_TOKEN and VITE_GH_TOKEN"
        type: string
        default: ""
        required: false
      bitbucket_token:
        type: string
        default: ""
        required: false
      gitlab_token:
        type: string
        default: ""
        required: false
      bun:
        type: boolean
        default: false
        required: false
      jsr_scope:
        type: string
        description: "Scope to use for JSR publishing if package.json has a root-level name (e.g., '@myorg')"
        default: ""
        required: false
      github_packages_scope:
        type: string
        description: "Scope to use for GitHub Packages if package.json has a root-level name (e.g., '@myorg')"
        default: ""
        required: false
    secrets:
      gh_token:
        required: false
      bitbucket_token:
        required: false
      gitlab_token:
        required: false
      api_token:
        required: false
      NPM_TOKEN:
        required: false
      JSR_TOKEN:
        required: false
jobs:
  detect_platforms:
    name: evaluate
    if: contains(github.event.head_commit.message, 'release v')
    runs-on: ubuntu-latest
    outputs:
      npm: ${{ steps.platform-detection.outputs.npm }}
      jsr: ${{ steps.platform-detection.outputs.jsr }}
      github_packages: ${{ steps.platform-detection.outputs.github_packages }}
      platforms: ${{ steps.platform-detection.outputs.platforms }}
      has_npm_token: ${{ steps.check-npm-token.outputs.has_npm_token }}
      all_skipped: ${{ steps.platform-detection.outputs.all_skipped }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Detect Publishing Platforms
        id: platform-detection
        run: |
          echo "::group::Platform Detection"

          # Initialize variables
          NPM=""
          JSR=""
          GITHUB_PACKAGES=""
          SKIPPED_PLATFORMS=()
          ENABLED_PLATFORMS=()

          # NPM Detection with skip file check
          if [ -f ".skip-npm" ]; then
            echo "::notice::NPM publishing skipped - .skip-npm file detected"
            SKIPPED_PLATFORMS+=("NPM")
          elif [ -f "package.json" ]; then
            PRIVATE=$(cat package.json | jq -r '.private // false')
            if [ "$PRIVATE" != "true" ]; then
              NPM="npm"
              ENABLED_PLATFORMS+=("NPM")
              echo "✅ NPM publishing enabled"
            else
              echo "ℹ️ NPM publishing disabled - package.json has private:true"
              SKIPPED_PLATFORMS+=("NPM (private)")
            fi
          else
            echo "ℹ️ NPM publishing not applicable - no package.json found"
          fi

          # JSR Detection with skip file check
          if [ -f ".skip-jsr" ]; then
            echo "::notice::JSR publishing skipped - .skip-jsr file detected"
            SKIPPED_PLATFORMS+=("JSR")
          elif [ -f "deno.json" ] || [ -f "deno.jsonc" ] || [ -f "jsr.json" ] || [ -f "jsr.jsonc" ]; then
            JSR="jsr"
            ENABLED_PLATFORMS+=("JSR")
            echo "✅ JSR publishing enabled"
          else
            echo "ℹ️ JSR publishing not applicable - no jsr.json or deno.json found"
          fi

          # GitHub Packages Detection with skip file check
          if [ -f ".skip-github-packages" ]; then
            echo "::notice::GitHub Packages publishing skipped - .skip-github-packages file detected"
            SKIPPED_PLATFORMS+=("GitHub Packages")
          elif [ -f ".npmrc.github" ]; then
            GITHUB_PACKAGES="Github packages"
            ENABLED_PLATFORMS+=("GitHub Packages")
            echo "✅ GitHub Packages publishing enabled"
          else
            echo "ℹ️ GitHub Packages publishing not applicable - no .npmrc.github found"
          fi

          # Generate platform list
          PLATFORMS=""
          PLATFORM_ARRAY=()
          [ -n "$NPM" ] && PLATFORM_ARRAY+=("$NPM")
          [ -n "$JSR" ] && PLATFORM_ARRAY+=("$JSR")
          [ -n "$GITHUB_PACKAGES" ] && PLATFORM_ARRAY+=("$GITHUB_PACKAGES")

          # Join array elements with comma and space
          IFS=", "
          PLATFORMS="${PLATFORM_ARRAY[*]}"

          # Check if all platforms are skipped
          ALL_SKIPPED="false"
          if [ ${#PLATFORM_ARRAY[@]} -eq 0 ]; then
            ALL_SKIPPED="true"
          fi

          # Check NPM token availability
          # We'll check this in a separate step because secrets can't be checked directly in shell
          HAS_NPM_TOKEN="pending"

          # Set outputs
          echo "npm=$NPM" >> $GITHUB_OUTPUT
          echo "jsr=$JSR" >> $GITHUB_OUTPUT
          echo "github_packages=$GITHUB_PACKAGES" >> $GITHUB_OUTPUT
          echo "platforms=$PLATFORMS" >> $GITHUB_OUTPUT
          echo "has_npm_token=$HAS_NPM_TOKEN" >> $GITHUB_OUTPUT
          echo "all_skipped=$ALL_SKIPPED" >> $GITHUB_OUTPUT

          # Generate comprehensive summary
          echo ""
          echo "📊 Publishing Summary:"
          echo "===================="

          if [ ${#ENABLED_PLATFORMS[@]} -gt 0 ]; then
            echo "✅ Enabled platforms: ${ENABLED_PLATFORMS[*]}"
          fi

          if [ ${#SKIPPED_PLATFORMS[@]} -gt 0 ]; then
            echo "⏭️  Skipped platforms: ${SKIPPED_PLATFORMS[*]}"
          fi

          if [ "$ALL_SKIPPED" == "true" ]; then
            echo ""
            echo "::warning::All publishing platforms are skipped or not applicable!"
            echo "::notice::To enable publishing, remove skip files (.skip-npm, .skip-jsr, .skip-github-packages) or ensure proper configuration files exist"
          else
            echo ""
            echo "::notice::Will publish to: $PLATFORMS"
          fi

          echo "::endgroup::"
      - name: Check NPM Token Availability
        id: check-npm-token
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "::group::NPM Token Check Debug"
          echo "Checking NPM_TOKEN availability..."
          echo "Length of NPM_TOKEN: ${#NPM_TOKEN}"

          # GitHub masks secrets, so we can't see the actual value, but we can check if it exists
          if [ -z "${NPM_TOKEN}" ]; then
            echo "NPM_TOKEN is empty or not set"
            echo "has_npm_token=false" >> $GITHUB_OUTPUT
            echo "::warning::NPM_TOKEN secret is not available or empty"
            echo "::warning::NPM authentication requires NPM_TOKEN secret to be set"
          elif [ "${NPM_TOKEN}" = "" ]; then
            echo "NPM_TOKEN is an empty string"
            echo "has_npm_token=false" >> $GITHUB_OUTPUT
            echo "::warning::NPM_TOKEN secret is set but empty"
          else
            echo "NPM_TOKEN is available (length: ${#NPM_TOKEN})"
            echo "has_npm_token=true" >> $GITHUB_OUTPUT
            echo "::notice::NPM_TOKEN secret is available (will be used as NODE_AUTH_TOKEN for npm)"
          fi
          echo "::endgroup::"
      # Remove the early NPM token check as secrets might not be available in this job
      - name: "Ready"
        run: |
          echo "ready to publish"
          echo "::notice::Ready to publish to the following registry platforms: ${{ steps.platform-detection.outputs.platforms }}"
  cancel_if_all_skipped:
    name: cancel publish
    if: needs.detect_platforms.outputs.all_skipped == 'true'
    needs:
      - detect_platforms
    runs-on: ubuntu-latest
    steps:
      - name: Cancel workflow
        run: |
          echo "::warning::All publishing platforms are skipped - cancelling workflow"
          echo ""
          echo "📋 Publishing was skipped for all platforms due to skip files or configuration."
          echo ""
          echo "To enable publishing, you can:"
          echo "  - Remove .skip-npm to enable NPM publishing"
          echo "  - Remove .skip-jsr to enable JSR publishing"
          echo "  - Remove .skip-github-packages to enable GitHub Packages publishing"
          echo ""
          echo "Or ensure the required configuration files exist:"
          echo "  - package.json (with private: false) for NPM"
          echo "  - jsr.json or deno.json for JSR"
          echo "  - .npmrc.github for GitHub Packages"
          echo ""

          # Cancel the workflow using GitHub API
          echo "Cancelling workflow run #${{ github.run_id }}..."
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/cancel"

          # Give the API call time to process
          sleep 5

          # Exit with error to ensure the workflow is marked as failed
          exit 1
  publish_npm:
    name: npm
    if: ( contains(github.event.head_commit.message, 'release v') && needs.detect_platforms.outputs.npm != '' )
    needs:
      - detect_platforms
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/
      - name: Install pnpm
        run: npm i -g pnpm @antfu/ni
      - name: Clean Install
        run: pnpm install
      - name: Build
        run: pnpm build
      - name: Check NPM Token in Publish Job
        id: npm-token-check
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "::group::NPM Token Check"
          echo "Checking if NPM_TOKEN was passed to this job..."
          if [ -z "$NODE_AUTH_TOKEN" ]; then
            echo "::error::NPM_TOKEN secret is not available in the publish job!"
            echo "::error::Please ensure NPM_TOKEN is set in your repository secrets"
            echo "::error::and passed correctly in the workflow call"
            exit 1
          else
            echo "✅ NPM_TOKEN is available (length: ${#NODE_AUTH_TOKEN})"
            echo "NPM config list:"
            npm config list
          fi
          echo "::endgroup::"
      - name: Check Package Existence and Access Level
        id: npm-check
        run: |
          PACKAGE_NAME=$(cat package.json | jq -r '.name')
          echo "Checking if package '$PACKAGE_NAME' exists on NPM..."

          # First test without auth (public package check)
          if npm view "$PACKAGE_NAME" --json 2>/dev/null; then
            echo "✅ Package exists on NPM"
            # Get current access level
            ACCESS_LEVEL=$(npm view "$PACKAGE_NAME" --json | jq -r '.access // "public"')
            echo "Current access level: $ACCESS_LEVEL"
            echo "access_level=$ACCESS_LEVEL" >> $GITHUB_OUTPUT
            echo "package_exists=true" >> $GITHUB_OUTPUT
          else
            echo "::warning::Package '$PACKAGE_NAME' not found or is private"
            echo "::notice::Will attempt to create new package on NPM"
            echo "access_level=public" >> $GITHUB_OUTPUT
            echo "package_exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Verify NPM Authentication
        run: |
          echo "Testing NPM authentication..."
          npm whoami 2>/dev/null && echo "✅ NPM authentication successful" || echo "::warning::NPM whoami failed (may be normal for automation tokens)"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish to NPM
        run: |
          ACCESS_FLAG=""
          if [ "${{ steps.npm-check.outputs.access_level }}" != "null" ] && [ "${{ steps.npm-check.outputs.access_level }}" != "" ]; then
            ACCESS_FLAG="--access ${{ steps.npm-check.outputs.access_level }}"
          fi
          echo "Publishing with access level: ${{ steps.npm-check.outputs.access_level }}"
          npm publish $ACCESS_FLAG
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  publish_jsr:
    name: jsr
    if: ( contains(github.event.head_commit.message, 'release v') && needs.detect_platforms.outputs.jsr != '' )
    needs:
      - detect_platforms
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: pnpm/action-setup@v2
        with:
          version: latest
      - run: pnpm install --frozen-lockfile
      - name: Handle JSR Package Naming
        id: jsr-naming
        run: |
          # Get package name from package.json
          PACKAGE_JSON_NAME=$(cat package.json | jq -r '.name')
          echo "Package.json name: $PACKAGE_JSON_NAME"

          # Check if it's a root-level package (no @ prefix)
          if [[ "$PACKAGE_JSON_NAME" =~ ^@ ]]; then
            echo "Package is already scoped"
            JSR_PACKAGE_NAME="$PACKAGE_JSON_NAME"
          else
            # Root-level package - check if scope is provided
            if [ -n "${{ inputs.jsr_scope }}" ]; then
              # Ensure scope starts with @
              SCOPE="${{ inputs.jsr_scope }}"
              if [[ ! "$SCOPE" =~ ^@ ]]; then
                SCOPE="@$SCOPE"
              fi
              JSR_PACKAGE_NAME="$SCOPE/$PACKAGE_JSON_NAME"
              echo "::notice::Using scoped name for JSR: $JSR_PACKAGE_NAME"
            else
              echo "::warning::Root-level package detected but no jsr_scope provided. JSR requires scoped packages."
              echo "::warning::You may need to manually update jsr.json with a scoped name."
              JSR_PACKAGE_NAME="$PACKAGE_JSON_NAME"
            fi
          fi

          echo "jsr_package_name=$JSR_PACKAGE_NAME" >> $GITHUB_OUTPUT

          # Update or validate jsr.json
          if [ -f "jsr.json" ]; then
            CURRENT_JSR_NAME=$(cat jsr.json | jq -r '.name // empty')
            if [ "$CURRENT_JSR_NAME" != "$JSR_PACKAGE_NAME" ]; then
              echo "Updating jsr.json with package name: $JSR_PACKAGE_NAME"
              jq --arg name "$JSR_PACKAGE_NAME" '.name = $name' jsr.json > jsr.json.tmp && mv jsr.json.tmp jsr.json
            fi
          fi
      - name: Check JSR Package Existence
        id: jsr-check
        run: |
          # Use the processed package name
          PACKAGE_NAME="${{ steps.jsr-naming.outputs.jsr_package_name }}"

          # Validate package name
          if [ -z "$PACKAGE_NAME" ]; then
            echo "::error::Could not determine JSR package name"
            exit 1
          fi

          echo "Checking if package '$PACKAGE_NAME' exists on JSR..."

          # Check if package exists on JSR
          # JSR API endpoint format: https://api.jsr.io/packages/{scope}/{name}
          # Extract scope and name from package name (format: @scope/name)
          SCOPE=$(echo "$PACKAGE_NAME" | cut -d'/' -f1 | sed 's/@//')
          NAME=$(echo "$PACKAGE_NAME" | cut -d'/' -f2)

          if [ -z "$SCOPE" ] || [ -z "$NAME" ]; then
            echo "::error::Invalid package name format. Expected @scope/name, got: $PACKAGE_NAME"
            exit 1
          fi

          echo "::group::JSR Package Check"
          echo "Package name: $PACKAGE_NAME"
          echo "Parsed scope: $SCOPE"
          echo "Parsed name: $NAME"

          # Check using JSR API endpoint
          API_URL="https://api.jsr.io/scopes/$SCOPE/packages/$NAME"
          WEB_URL="https://jsr.io/@$SCOPE/$NAME"
          echo "Checking JSR API: $API_URL"
          echo "Web URL: $WEB_URL"

          # First try the API endpoint
          API_RESPONSE=$(curl -s -w "\n%{http_code}" "$API_URL")
          API_STATUS=$(echo "$API_RESPONSE" | tail -n1)
          API_BODY=$(echo "$API_RESPONSE" | head -n-1)

          echo "API Status: $API_STATUS"

          # If API doesn't work, try web URL with browser headers
          if [ "$API_STATUS" != "200" ] && [ "$API_STATUS" != "404" ]; then
            echo "API check inconclusive, trying web URL with browser headers..."
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -L \
              -H "User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36" \
              -H "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8" \
              "$WEB_URL")
            echo "Web Status with browser headers: $HTTP_STATUS"
          else
            HTTP_STATUS="$API_STATUS"
          fi

          echo "::endgroup::"

          # Check if package exists based on status
          if [ "$API_STATUS" = "200" ] || [ "$HTTP_STATUS" = "200" ]; then
            echo "✅ Package $PACKAGE_NAME exists on JSR"
            echo "package_exists=true" >> $GITHUB_OUTPUT
          elif [ "$API_STATUS" = "404" ] || [ "$HTTP_STATUS" = "404" ]; then
            echo "::warning::Package '$PACKAGE_NAME' not found on JSR (404)"
            echo "::warning::To register this package on JSR:"
            echo "::warning::1. Visit https://jsr.io"
            echo "::warning::2. Sign in with your GitHub account"
            echo "::warning::3. Create a new package with the name: $PACKAGE_NAME"
            echo "::warning::Will attempt to publish anyway - it might be a new package"
            echo "package_exists=false" >> $GITHUB_OUTPUT
          else
            echo "::notice::Could not determine package existence (API: $API_STATUS, Web: $HTTP_STATUS) - proceeding with publish"
            echo "package_exists=unknown" >> $GITHUB_OUTPUT
          fi
      - name: Publish to JSR
        run: |
          if [ -n "${{ secrets.JSR_TOKEN }}" ]; then
            echo "Using token authentication for JSR"
            npx jsr publish --allow-slow-types --token=${{ secrets.JSR_TOKEN }}
          else
            echo "Using OIDC authentication for JSR"
            npx jsr publish --allow-slow-types
          fi
        env:
          JSR_TOKEN: ${{ secrets.JSR_TOKEN }}

  publish_github:
    name: Github Packages
    if: ( contains(github.event.head_commit.message, 'release v') && needs.detect_platforms.outputs.github_packages != '' )
    needs:
      - detect_platforms
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: pnpm/action-setup@v2
        with:
          version: latest
      - name: Install pnpm
        run: npm i -g pnpm @antfu/ni bun
      - name: Setup GitHub Packages registry
        run: |
          echo "Before copying .npmrc.github:"
          cat .npmrc.github
          cp .npmrc.github .npmrc
          echo "Contents of .npmrc after copy:"
          cat .npmrc
      - name: Clean Install (using pnpm)
        run: pnpm install
      - name: Build
        run: pnpm build
      - name: Handle GitHub Packages Naming
        id: github-naming
        run: "# Get package name from package.json\nPACKAGE_JSON_NAME=$(cat package.json | jq -r '.name')\necho \"Original package.json name: $PACKAGE_JSON_NAME\"\n\n# Check if it's a root-level package (no @ prefix)\nif [[ \"$PACKAGE_JSON_NAME\" =~ ^@ ]]; then\n  echo \"Package is already scoped, no changes needed\"\nelse\n  # Root-level package - check if scope is provided\n  if [ -n \"${{ inputs.github_packages_scope }}\" ]; then\n    # Ensure scope starts with @\n    SCOPE=\"${{ inputs.github_packages_scope }}\"\n    if [[ ! \"$SCOPE\" =~ ^@ ]]; then\n      SCOPE=\"@$SCOPE\"\n    fi\n    NEW_PACKAGE_NAME=\"$SCOPE/$PACKAGE_JSON_NAME\"\n    echo \"::notice::Temporarily updating package.json for GitHub Packages: $NEW_PACKAGE_NAME\"\n    \n    # Create backup of original package.json\n    cp package.json package.json.backup\n    \n    # Update package.json with scoped name\n    jq --arg name \"$NEW_PACKAGE_NAME\" '.name = $name' package.json > package.json.tmp && mv package.json.tmp package.json\n    \n    echo \"package_modified=true\" >> $GITHUB_OUTPUT\n  else\n    echo \"::warning::Root-level package detected but no github_packages_scope provided.\"\n    echo \"::warning::GitHub Packages requires scoped packages. Publishing may fail.\"\n    echo \"package_modified=false\" >> $GITHUB_OUTPUT\n  fi\nfi\n"
      - name: Verify GitHub Packages Authentication
        run: |
          echo "Testing GitHub Packages registry access..."
          if npm whoami --registry https://npm.pkg.github.com/ 2>/dev/null; then
            echo "✅ GitHub Packages authentication successful"
          else
            echo "⚠️ whoami failed (expected with GITHUB_TOKEN), testing access differently..."
            # Test by trying to access the registry
            curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github+json" \
                 "https://api.github.com/user" | jq '.login' || {
              echo "❌ GitHub authentication failed"
              exit 1
            }
            echo "✅ GitHub authentication verified via API"
          fi
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: Publish to GitHub Packages
        run: npm publish --registry https://npm.pkg.github.com/
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: Restore Original Package.json
        if: steps.github-naming.outputs.package_modified == 'true'
        run: |
          echo "Restoring original package.json"
          mv package.json.backup package.json
          echo "✅ Original package.json restored"
  publish_success:
    name: "Published"
    if: ( !failure() && contains(github.event.head_commit.message, 'release v') )
    needs:
      - publish_npm
      - publish_github
      - publish_jsr
      - detect_platforms
    runs-on: ubuntu-latest
    permissions:
        contents: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Create Changelog Entry
        run: npx changelogithub
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: Done
        env:
          HAS_NPM_TOKEN: ${{ needs.detect_platforms.outputs.has_npm_token }}
          NPM: ${{ needs.detect_platforms.outputs.npm }}
          JSR: ${{ needs.detect_platforms.outputs.jsr }}
          GITHUB_PACKAGES: ${{ needs.detect_platforms.outputs.github_packages }}
          PLATFORMS: ${{ needs.detect_platforms.outputs.platforms }}
        run: |
          echo "::notice :: ${{ github.actor }} published from ${{github.ref_type}} ${{ github.ref_name }} to ${{ env.PLATFORMS }} and updated the repo's changelog entry 🚀"
  publish_failure:
    name: "Failure"
    if: ( failure() && contains(github.event.head_commit.message, 'release v') )
    needs:
      - publish_npm
      - publish_github
      - publish_jsr
      - detect_platforms
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout repo for tag removal
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: "Analyze Failure"
        continue-on-error: true
        run: |
          echo "::error::Publication workflow failed"

          # Check individual job results
          DETECT_STATUS="${{ needs.detect_platforms.result }}"
          NPM_STATUS="${{ needs.publish_npm.result }}"
          JSR_STATUS="${{ needs.publish_jsr.result }}"
          GITHUB_STATUS="${{ needs.publish_github.result }}"

          FAILED_JOBS=()

          # Check each job status
          if [ "$DETECT_STATUS" == "failure" ]; then
            FAILED_JOBS+=("Platform Detection")
            echo "::error::Platform Detection (early error detection) job failed"
          fi

          if [ "$NPM_STATUS" == "failure" ]; then
            FAILED_JOBS+=("NPM Publishing")
            echo "::error::NPM Publishing job failed"
          fi

          if [ "$JSR_STATUS" == "failure" ]; then
            FAILED_JOBS+=("JSR Publishing")
            echo "::error::JSR Publishing job failed"
          fi

          if [ "$GITHUB_STATUS" == "failure" ]; then
            FAILED_JOBS+=("GitHub Packages Publishing")
            echo "::error::GitHub Packages Publishing job failed"
          fi

          # Create summary
          if [ ${#FAILED_JOBS[@]} -gt 0 ]; then
            IFS=", "
            FAILED_LIST="${FAILED_JOBS[*]}"
            echo "::notice::Failed jobs: $FAILED_LIST"
            echo "::notice::Job statuses - Platform Detection: $DETECT_STATUS, NPM: $NPM_STATUS, JSR: $JSR_STATUS, GitHub: $GITHUB_STATUS"
          else
            echo "::warning::No specific job failures detected, but workflow failed overall"
          fi
      - name: "Remove Tag"
        continue-on-error: true
        run: |
          echo "Publication failed. Looking for tag to remove..."

          # Since workflow is triggered by commit message "release v", we need to find the tag
          # First, try to extract version from commit message
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          echo "Commit message: $COMMIT_MSG"

          # Extract version from commit message (e.g., "release v1.2.3" -> "v1.2.3")
          TAG_FROM_MSG=$(echo "$COMMIT_MSG" | grep -o "release v[0-9][^[:space:]]*" | sed 's/release //')

          # Also try to get version from package.json
          PACKAGE_VERSION=$(cat package.json | jq -r '.version')
          TAG_FROM_PACKAGE="v$PACKAGE_VERSION"

          echo "Tag from commit message: $TAG_FROM_MSG"
          echo "Tag from package.json: $TAG_FROM_PACKAGE"

          # Use commit message tag if available, otherwise package.json
          if [ -n "$TAG_FROM_MSG" ]; then
            TAG="$TAG_FROM_MSG"
          else
            TAG="$TAG_FROM_PACKAGE"
          fi

          echo "Attempting to remove tag: $TAG"

          # Check if the tag exists
          if git ls-remote --tags origin | grep -q "refs/tags/${TAG}$"; then
            echo "Tag ${TAG} exists, removing it..."
            if git push origin ":refs/tags/${TAG}"; then
              echo "::notice::Successfully removed tag ${TAG} from repository"
            else
              echo "::error::Failed to remove tag ${TAG} - you may need to remove it manually"
              echo "::error::Run: git push origin :refs/tags/${TAG}"
            fi
          else
            echo "::warning::Tag ${TAG} does not exist or was already removed"
            echo "Available tags:"
            git ls-remote --tags origin | head -5
          fi
      - name: "Canceled"
        run: |
          echo "::notice::Tests passed but publication failed - cancelling workflow to indicate controlled failure"
          # Use the GitHub API to cancel the workflow
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/cancel"
