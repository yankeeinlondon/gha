name: test

on:
  workflow_call:
    inputs:
      os:
        type: string
        default: '["ubuntu-latest", "windows-latest", "macos-latest"]'
        required: false
      nodeVersions:
        type: string
        default: '["20.x", "22.x"]'
        required: false
      failFast:
        type: boolean
        default: false
        required: false
      api_token:
        type: string
        description: "allows an API token to be passed to testing as API_TOKEN and VITE_API_TOKEN"
        default: ""
        required: false
      gh_token:
        description: "allows a Github personal access token to be passed to testing as GH_TOKEN and VITE_GH_TOKEN"
        type: string
        default: ""
        required: false
      bitbucket_token:
        type: string
        default: ""
        required: false
      gitlab_token:
        type: string
        default: ""
        required: false
      bun:
        type: boolean
        default: false
        required: false

    secrets:
      gh_token:
        required: false
      bitbucket_token:
        required: false
      gitlab_token:
        required: false
      api_token:
        required: false

jobs:

  check-coverage:
    name: eval
    runs-on: ubuntu-latest
    outputs:
      has_coverage: ${{ steps.check.outputs.has_coverage }}
    steps:
      - uses: actions/checkout@v4
      - name: Check for coverage script
        id: check
        run: |
          if jq -e '.scripts.coverage' package.json > /dev/null 2>&1; then
            echo "has_coverage=true" >> $GITHUB_OUTPUT
            echo "::notice::Coverage script found in package.json"
          else
            echo "has_coverage=false" >> $GITHUB_OUTPUT
            echo "::notice::No coverage script found in package.json, coverage job will be skipped"
          fi
          
  coverage:
    name: coverage
    needs: check-coverage
    if: needs.check-coverage.outputs.has_coverage == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
      - name: Setup
        run: npm i -g pnpm @antfu/ni
      - name: Install
        run: pnpm install
      - name: Build
        run: nr build
      - name: Run coverage
        run: pnpm coverage
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage/
            !coverage/tmp/
      - name: Coverage summary
        run: |
          if [ -f "coverage/coverage-summary.json" ]; then
            COVERAGE=$(jq -r '.total.lines.pct // 0' coverage/coverage-summary.json)
            echo "## Test Coverage Report ðŸ“Š" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Overall Coverage:** ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Type | Coverage |" >> $GITHUB_STEP_SUMMARY
            echo "|------|----------|" >> $GITHUB_STEP_SUMMARY
            echo "| Lines | $(jq -r '.total.lines.pct // 0' coverage/coverage-summary.json)% |" >> $GITHUB_STEP_SUMMARY
            echo "| Statements | $(jq -r '.total.statements.pct // 0' coverage/coverage-summary.json)% |" >> $GITHUB_STEP_SUMMARY
            echo "| Functions | $(jq -r '.total.functions.pct // 0' coverage/coverage-summary.json)% |" >> $GITHUB_STEP_SUMMARY
            echo "| Branches | $(jq -r '.total.branches.pct // 0' coverage/coverage-summary.json)% |" >> $GITHUB_STEP_SUMMARY
            
            echo "::notice::Test coverage: ${COVERAGE}%"
          else
            echo "::warning::Coverage summary not found at coverage/coverage-summary.json"
          fi

  unit:
    name: unit tests
    runs-on: ${{ matrix.os }}
    env:
      VITE_GH_TOKEN: ${{ secrets.gh_token }}
      GH_TOKEN: ${{ secrets.gh_token }}
      VITE_BITBUCKET_TOKEN: ${{ secrets.bitbucket_token }}
      BITBUCKET_TOKEN: ${{ secrets.bitbucket_token }}
      VITE_GITLAB_TOKEN: ${{ secrets.gitlab_token }}
      GITLAB_TOKEN: ${{ secrets.gitlab_token }}
      API_TOKEN: ${{ secrets.api_token }}
      VITE_API_TOKEN: ${{ secrets.api_token }}
      OS: ${{ github.env.RUNNER_OS }}
    strategy:
      matrix:
        node-version: ${{ fromJSON(inputs.nodeVersions) }}
        os: ${{ fromJSON(inputs.os) }}
      fail-fast: ${{ inputs.failFast }}

    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2
        if: ${{ inputs.bun }}
      - name: Bun Install
        run: bun install
        if: ${{ inputs.bun }}
      - name: Bun Builder
        run: bun run build
        if: ${{ inputs.bun }}
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Setup
        run: npm i -g pnpm @antfu/ni
      - name: Install
        run: pnpm install
      - name: Build
        run: nr build
      - name: Test
        run: pnpm test


  lint:
    name: lint
    runs-on: ubuntu-latest

    steps:
      - name: Info
        run: |
          echo "::group::Info"
          echo "Commit Msg: '${{github.event.head_commit.message}}'"
          echo "Actor: ${{github.actor}}"
          echo "Event Name: ${{github.event_name}}"
          echo "Event Path: ${{github.event_path}}"
          echo "HEAD Ref: ${{github.head_ref}}"
          echo "Ref Name: ${{github.ref_name}}"
          echo "Ref Type: ${{github.ref_type}}"
          echo "Workflow: ${{github.workflow}}"
          echo "Workspace: ${{github.workspace}}"
          echo "Action: ${{github.action}}"
          echo "Action Path: ${{github.action_path}}"
          echo "Action Ref: ${{github.action_ref}}"
          echo "Action Status: ${{github.action_status}}"
          echo "Repo: ${{github.action_repository}}"
          echo "Base Ref: ${{github.base_ref}}"
          echo "ENV: ${{ toJSON(env) }}"
          echo "Job: ${{ toJSON(job) }}"
          echo "Steps: ${{ toJSON(steps) }}"
          echo "Runner: ${{ toJSON(runner) }}"
          echo "OS: ${RUNNER_OS}"
          echo "::endgroup::"
          echo "::notice:: ${{github.actor}} has triggered CI"
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Setup
        run: npm i -g pnpm @antfu/ni
      - name: Clean Install
        run: nci
      - name: Lint
        run: nr lint --if-present
      - name: Cancel Workflow
        if: failure()
        uses: andymckay/cancel-action@0.4

  success:
    name: success
    if: ( !failure() && !cancelled() )
    runs-on: ubuntu-latest
    needs:
        - unit
        - coverage
        - lint
        - check-coverage

    steps:
      - name: Success
        run: |
          echo ":rocket: tests run successfully"
          echo "::notice status=success::Tests and Linting completed successfully. The changes in this commit versus last can be found at: ${{ github.event.compare }}"

  failure:
    name: failure
    if: failure()
    runs-on: ubuntu-latest
    needs:
      - unit
      - coverage
      - lint
      - check-coverage

    steps:
      - name: "Analyze Failure"
        continue-on-error: true
        run: |
            echo "::error::Testing has failed"
            
            # Check individual job results
            LINT_STATUS="${{ needs.lint.result }}"
            COVERAGE_STATUS="${{ needs.coverage.result }}"
            UNIT_STATUS="${{ needs.unit.result }}"
            
            FAILED_JOBS=()
            CANCELLED_JOBS=()
            WARN_JOBS=()

            # Check each job status
            if [ "$LINT_STATUS" == "failure" ]; then
                FAILED_JOBS+=("lint testing")
                echo "::error::Linter failed!"
            fi
            if [ "$LINT_STATUS" == "cancelled" ]; then
                CANCELLED_JOBS+=("Linter")
                echo "::warning::Linter failed so cancelling the other test tasks (so we can fail fast)"
            fi

            
            if [ "$COVERAGE_STATUS" == "failure" ]; then
                FAILED_JOBS+=("coverage")
                echo "::error::coverage tests failed"
            fi
            if [ "$COVERAGE_STATUS" == "skipped" ]; then
                echo "::notice::Coverage was skipped (no coverage script in package.json)"
            fi
            
            if [ "$UNIT_STATUS" == "failure" ]; then
                UNIT_STATUS+=("unit testing")
                echo "::error::JSR Publishing job failed"
            fi
            
          
            # Create summary
            if [ ${#FAILED_JOBS[@]} -gt 0 ]; then
                IFS=", "
                FAILED_LIST="${FAILED_JOBS[*]}"
                echo "::notice::Failed jobs: $FAILED_LIST"
            elif [ ${#CANCELLED_JOBS[@]} -gt 0 ]; then
                echo "::warning::Job has been cancelled"
            else
                echo "::info::No specific job failures detected, but workflow failed overall"
            fi
