# Publish NPM Package Workflow
# This example demonstrates composing multiple job templates
# to create a complete package publishing pipeline
#
# In a real workflow, the modular system would process template references
# marked with special comments like: # @extends: jobs/test-node.yml

name: Publish to NPM
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (leave empty to use package.json)'
        required: false
        type: string
      tag:
        description: 'NPM tag (latest, beta, next)'
        required: false
        default: 'latest'
        type: choice
        options:
          - latest
          - beta
          - next

jobs:
  # Test job that would use the test-node template
  # @extends: jobs/test-node.yml
  # @with:
  #   node-version: ['18.x', '20.x', '22.x']
  #   coverage: true
  #   lint: true
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['18.x', '20.x', '22.x']
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile
      - run: pnpm lint
      - run: pnpm test --coverage

  # Build job with custom configuration
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      # @extends: steps/checkout.yml
      - uses: actions/checkout@v4
      
      # @extends: steps/setup-node.yml
      # @with:
      #   node-version: '20.x'
      #   registry-url: 'https://registry.npmjs.org'
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build package
        run: pnpm build
      
      - name: Run package tests
        run: pnpm test:package
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            lib/
            types/

  # Publish job
  publish:
    needs: build
    runs-on: ubuntu-latest
    environment: npm-publish
    permissions:
      contents: read
      id-token: write  # For NPM provenance
    steps:
      # @extends: steps/checkout.yml
      - uses: actions/checkout@v4
      
      # @extends: steps/setup-node.yml
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
          cache: 'pnpm'
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile --production
      
      # Version handling
      - name: Set version
        if: inputs.version
        run: npm version ${{ inputs.version }} --no-git-tag-version
      
      - name: Get package info
        id: package
        run: |
          echo "name=$(jq -r .name package.json)" >> $GITHUB_OUTPUT
          echo "version=$(jq -r .version package.json)" >> $GITHUB_OUTPUT
      
      # Publish with provenance
      - name: Publish to NPM
        run: npm publish --tag ${{ inputs.tag || 'latest' }} --provenance
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      # Create GitHub release
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.package.outputs.version }}
          release_name: Release ${{ steps.package.outputs.version }}
          body: |
            Published ${{ steps.package.outputs.name }}@${{ steps.package.outputs.version }} to NPM
            
            Install with:
            ```bash
            npm install ${{ steps.package.outputs.name }}@${{ steps.package.outputs.version }}
            ```
          draft: false
          prerelease: ${{ inputs.tag != 'latest' }}

  # Post-publish validation
  validate:
    needs: publish
    runs-on: ubuntu-latest
    steps:
      # @extends: steps/setup-node.yml
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      
      - name: Validate published package
        run: |
          # Wait for NPM to propagate
          sleep 30
          
          # Try to install the published package
          npm install ${{ needs.publish.outputs.name }}@${{ needs.publish.outputs.version }}
          
          # Basic smoke test
          node -e "require('${{ needs.publish.outputs.name }}')"
